{"version":3,"file":"ng2-confirmations.umd.min.js","sources":["../../out-tsc/lib/src/confirmations.service.ts","../../out-tsc/lib/src/confirmation.component.ts","../../out-tsc/lib/src/confirmations.component.ts","../../out-tsc/lib/src/module.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {ConfirmSettings} from './interfaces/confirm-settings';\r\nimport {ConfirmEmit} from './interfaces/confirm-emit';\r\nimport {ResolveEmit} from './interfaces/resolve-emit';\nexport class ConfirmationService {\r\n    confirmation$ = new Subject<ConfirmEmit>();\n/**\n * @param {?} title\n * @param {?} message\n * @param {?=} override\n * @return {?}\n */\ncreate(title: string, message: string, override: ConfirmSettings = {}) {\r\n        const /** @type {?} */ resolve$ = new Subject<ResolveEmit>();\r\n\r\n        this.confirmation$.next({\r\n            title,\r\n            message,\r\n            resolve$,\r\n            override\r\n        });\r\n\r\n        return resolve$;\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ConfirmationService_tsickle_Closure_declarations() {\n/** @type {?} */\nConfirmationService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConfirmationService.ctorParameters;\n/** @type {?} */\nConfirmationService.prototype.confirmation$;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, Injector, NgZone} from '@angular/core';\r\nimport {animate, state, style, transition, trigger} from '@angular/animations';\r\nimport {ResolveEmit} from './interfaces/resolve-emit';\nexport class ConfirmationComponent {\n/**\n * @param {?} _injector\n * @param {?} _ngZone\n */\nconstructor(\nprivate _injector: Injector,\nprivate _ngZone: NgZone\r\n    ) {\r\n        for (const key in this.incomingData) {\r\n            const fromInjector = this._injector.get(key);\r\n\r\n            if (fromInjector !== undefined) {\r\n                this.incomingData[key] = fromInjector;\r\n            }\r\n        }\r\n    }\r\n\r\n    animationState = 'enter';\r\n\r\n    incomingData: any = {\r\n        title: '',\r\n        message: '',\r\n        overlay: true,\r\n        overlayClickToClose: true,\r\n        showCloseButton: true,\r\n        confirmText: 'Yes',\r\n        declineText: 'No',\r\n        resolve: null\r\n    };\n/**\n * @return {?}\n */\noverlayClick() {\r\n        if (!this.incomingData.overlayClickToClose) {\r\n            return;\r\n        }\r\n\r\n        this.close('overlayClick')\r\n    }\n/**\n * @param {?} type\n * @return {?}\n */\nclose(type: string) {\r\n        this.animationState = 'leave';\r\n        this._ngZone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                this._ngZone.run(() => {\r\n                    this.resolve({closedWithOutResolving: type});\r\n                });\r\n            }, 450);\r\n        });\r\n    }\n/**\n * @param {?} how\n * @return {?}\n */\nresolve(how: ResolveEmit) {\r\n        this.animationState = 'leave';\r\n        this._ngZone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                this._ngZone.run(() =>  {\r\n                    this.incomingData.resolve.next(how);\r\n                });\r\n            }, 450);\r\n        });\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector: 'jaspero-confirmation',\r\n    template: `\r\n        <div *ngIf=\"incomingData.overlay\" class=\"jaspero__overlay\" [@overlayAn]=\"animationState\" (click)=\"overlayClick()\"></div>\r\n        <div class=\"jaspero__dialog\" [@wrapperAn]=\"animationState\">\r\n            <div class=\"jaspero__dialog-title\">\r\n                {{incomingData.title}}\r\n            </div>\r\n            <div class=\"jaspero__dialog-content\">\r\n                {{incomingData.message}}\r\n            </div>\r\n            <div class=\"jaspero__dialog-actions\">\r\n                <button class=\"default\" (click)=\"resolve({resolved: false})\">{{incomingData.declineText}}</button>\r\n                <button class=\"primary\" (click)=\"resolve({resolved: true})\">{{incomingData.confirmText}}</button>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        :host {\r\n            display: block;\r\n            display: -ms-flexbox;\r\n            display: flex;\r\n            -ms-flex-flow: column;\r\n            flex-flow: column;\r\n            -ms-flex-pack: center;\r\n            justify-content: center;\r\n            -ms-flex-align: center;\r\n            align-items: center;\r\n            position: fixed;\r\n            top: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            left: 0;\r\n            z-index: 108;\r\n        }\r\n\r\n        .jaspero__overlay {\r\n            top: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            left: 0;\r\n            background-color: rgba(0,0,0,.54);\r\n            transform: translateZ(0);\r\n            opacity: 0;\r\n            transition: all .5s cubic-bezier(.35,0,.25,1);\r\n            position: fixed;\r\n            z-index: 109;\r\n        }\r\n\r\n        .jaspero__dialog {\r\n            min-width: 300px;\r\n            max-width: 50%;\r\n            max-height: 50%;\r\n            display: -ms-flexbox;\r\n            display: flex;\r\n            -ms-flex-flow: column;\r\n            flex-flow: column;\r\n            overflow: hidden;\r\n            position: relative;\r\n            z-index: 110;\r\n            outline: none;\r\n            border-radius: 2px;\r\n            opacity: 0;\r\n            box-shadow: 0 7px 9px -4px rgba(0,0,0,.2), 0 14px 21px 2px rgba(0,0,0,.14), 0 5px 26px 4px rgba(0,0,0,.12);\r\n            -ms-transform: scale(.9,.85);\r\n            transform: scale(.9,.85);\r\n            -ms-transform-origin: center center;\r\n            transform-origin: center center;\r\n            transition: opacity .4s cubic-bezier(.25,.8,.25,1),transform .4s cubic-bezier(.25,.8,.25,1) .05s;\r\n            will-change: opacity,transform;\r\n            background-color: #fff;\r\n            color: rgba(0, 0, 0, .87);\r\n        }\r\n\r\n        .jaspero__dialog-icon {\r\n            padding: 40px;\r\n            text-align: center;\r\n        }\r\n        .jaspero__dialog-icon svg {\r\n            width: 50px;\r\n            height: 50px;\r\n        }\r\n\r\n        .jaspero__dialog-icon svg path {\r\n            fill: white;\r\n        }\r\n\r\n        .jaspero__dialog-title {\r\n            font-size: 24px;\r\n            font-weight: 500;\r\n            letter-spacing: .005em;\r\n            line-height: 26px;\r\n            margin-bottom: 20px;\r\n            padding: 24px 24px 0;\r\n            text-transform: capitalize;\r\n        }\r\n\r\n        .jaspero__dialog-content {\r\n            padding: 0 24px 24px;\r\n            -ms-flex: 1;\r\n            flex: 1;\r\n            overflow: auto;\r\n            position: relative;\r\n        }\r\n\r\n        .jaspero__dialog-actions {\r\n            min-height: 52px;\r\n            padding: 8px 8px 8px 24px;\r\n            display: -ms-flexbox;\r\n            display: flex;\r\n            -ms-flex-align: center;\r\n            align-items: center;\r\n            -ms-flex-pack: end;\r\n            justify-content: flex-end;\r\n            position: relative;\r\n        }\r\n\r\n        .jaspero__dialog-actions button {\r\n            min-width: 88px;\r\n            min-height: 36px;\r\n            margin: 6px 8px;\r\n            padding: 0 16px;\r\n            display: inline-block;\r\n            position: relative;\r\n            overflow: hidden;\r\n            outline: none;\r\n            -webkit-user-select: none;\r\n            -moz-user-select: none;\r\n            -ms-user-select: none;\r\n            user-select: none;\r\n            cursor: pointer;\r\n            background: none;\r\n            border: 0;\r\n            border-radius: 2px;\r\n            transition: all .4s cubic-bezier(.25,.8,.25,1);\r\n            color: inherit;\r\n            font-family: inherit;\r\n            font-size: 14px;\r\n            font-style: inherit;\r\n            font-variant: inherit;\r\n            font-weight: 500;\r\n            letter-spacing: inherit;\r\n            line-height: 36px;\r\n            text-align: center;\r\n            text-transform: uppercase;\r\n            text-decoration: none;\r\n            vertical-align: top;\r\n            white-space: nowrap;\r\n        }\r\n\r\n        .jaspero__dialog-actions button.default {\r\n            color: inherit;\r\n        }\r\n\r\n        .jaspero__dialog-actions button.default:hover {\r\n            background-color: hsla(0,0%,60%,.2);\r\n        }\r\n\r\n        .jaspero__dialog-actions button.primary {\r\n            background-color: inherit;\r\n            color: rgba(255, 255, 255, .87);\r\n        }\r\n\r\n        .jaspero__dialog-actions button.primary:hover {\r\n            background-color: inherit;\r\n        }\r\n\r\n        .jaspero__dialog-actions button.raised {\r\n            box-shadow: 0 1px 5px rgba(0,0,0,.2), 0 2px 2px rgba(0,0,0,.14), 0 3px 1px -2px rgba(0,0,0,.12);\r\n        }\r\n\r\n        :host(.success) .jaspero__dialog-icon {background: #17A398}\r\n        :host(.error) .jaspero__dialog-icon {background: #D64550}\r\n        :host(.warning) .jaspero__dialog-icon {background: #FFC857}\r\n        :host(.info) .jaspero__dialog-icon {background: #8FBFE0}\r\n    `],\r\n    animations: [\r\n        trigger('overlayAn', [\r\n            state('void', style({opacity: 0})),\r\n            state('leave', style({opacity: 0})),\r\n            state('enter', style({opacity: 1})),\r\n            transition('void => enter', animate('400ms cubic-bezier(.25,.8,.25,1)')),\r\n            transition('enter => leave', animate('400ms cubic-bezier(.25,.8,.25,1)'))\r\n        ]),\r\n        trigger('wrapperAn', [\r\n            state('void', style({opacity: 0, transform: 'scale(0.75, 0.75) translate(0, 0)'})),\r\n            state('leave', style({opacity: 0, transform: 'scale(0.75, 0.75) translate(0, 0)'})),\r\n            state('enter', style({opacity: 1, transform: 'scale(1, 1) translate(0, 0)'})),\r\n            transition('void => enter', animate('450ms cubic-bezier(.5, 1.4, .5, 1)')),\r\n            transition('enter => leave', animate('450ms cubic-bezier(.5, 1.4, .5, 1)'))\r\n        ])\r\n    ]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n{type: NgZone, },\n];\n}\n\nfunction ConfirmationComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nConfirmationComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConfirmationComponent.ctorParameters;\n/** @type {?} */\nConfirmationComponent.prototype.animationState;\n/** @type {?} */\nConfirmationComponent.prototype.incomingData;\n/** @type {?} */\nConfirmationComponent.prototype._injector;\n/** @type {?} */\nConfirmationComponent.prototype._ngZone;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, OnInit, ViewContainerRef, OnDestroy, Input, ReflectiveInjector, ComponentFactoryResolver, ViewChild} from '@angular/core';\r\nimport {ConfirmationService} from './confirmations.service';\r\nimport {ConfirmationComponent} from './confirmation.component';\r\nimport {ConfirmSettings} from './interfaces/confirm-settings';\r\nimport {ResolveEmit} from './interfaces/resolve-emit';\nexport class ConfirmationsComponent implements OnInit, OnDestroy {\n/**\n * @param {?} _service\n * @param {?} _resolver\n */\nconstructor(\nprivate _service: ConfirmationService,\nprivate _resolver: ComponentFactoryResolver\r\n    ) { }\r\n\r\n     compViewContainerRef: ViewContainerRef;\n/**\n * @param {?} settings\n * @return {?}\n */\nset defaultSettings(settings: ConfirmSettings) {\r\n        this.settings = {...this.settings, ...settings};\r\n    }\r\n\r\n    settings: ConfirmSettings | any = {\r\n        overlay: true,\r\n        overlayClickToClose: true,\r\n        showCloseButton: true,\r\n        confirmText: 'Yes',\r\n        declineText: 'No'\r\n    };\nprivate _current: any;\nprivate _lastResolve: any;\nprivate _listener: any;\n/**\n * @return {?}\n */\nngOnInit() {\r\n\r\n        this._listener = this._service.confirmation$.subscribe((alert: any) => {\r\n            if (this._current) {\r\n                this._handleResolve();\r\n            }\r\n\r\n            if (!alert.close) {\r\n\r\n                const /** @type {?} */ settingsFinalAsArray = [];\r\n                const /** @type {?} */ settingFinalAsObj: any = {};\r\n\r\n                for (const /** @type {?} */ key in this.settings) {\r\n                    const /** @type {?} */ toUse = alert.override[key] !== undefined ? alert.override[key] : this.settings[key];\r\n\r\n                    settingsFinalAsArray.push({key: key, value: toUse});\r\n                    settingFinalAsObj[key] = toUse;\r\n                }\r\n\r\n                const /** @type {?} */ inputProviders = [\r\n                    {key: 'message', value: alert.message},\r\n                    {key: 'title', value: alert.title},\r\n                    {key: 'resolve', value: alert.resolve$},\r\n                    ...settingsFinalAsArray\r\n                ].map((input) => {\r\n                    return {provide: input.key, useValue: input.value};\r\n                });\r\n                const /** @type {?} */ resolvedInputs = ReflectiveInjector.resolve(inputProviders);\r\n                const /** @type {?} */ injector = ReflectiveInjector.fromResolvedProviders(resolvedInputs, this.compViewContainerRef.parentInjector);\r\n                const /** @type {?} */ factory = this._resolver.resolveComponentFactory(ConfirmationComponent);\r\n                const /** @type {?} */ component = factory.create(injector);\r\n\r\n                this._lastResolve = alert.resolve$.subscribe((res: any) => this._handleResolve(res));\r\n\r\n                this.compViewContainerRef.insert(component.hostView);\r\n\r\n                this._current = component;\r\n            }\r\n        });\r\n    }\n/**\n * @param {?=} res\n * @return {?}\n */\nprivate _handleResolve(res?: ResolveEmit) {\r\n        this._current.destroy();\r\n        this._lastResolve.unsubscribe();\r\n    }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n        if (this._listener) {\r\n            this._listener.unsubscribe();\r\n        }\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector: 'jaspero-confirmations',\r\n    entryComponents: [ConfirmationComponent],\r\n    template: `<div #comp></div>`\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConfirmationService, },\n{type: ComponentFactoryResolver, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'compViewContainerRef': [{ type: ViewChild, args: ['comp', {read: ViewContainerRef}, ] },],\n'defaultSettings': [{ type: Input },],\n};\n}\n\nfunction ConfirmationsComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nConfirmationsComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConfirmationsComponent.ctorParameters;\n/** @type {?} */\nConfirmationsComponent.propDecorators;\n/** @type {?} */\nConfirmationsComponent.prototype.compViewContainerRef;\n/** @type {?} */\nConfirmationsComponent.prototype.settings;\n/** @type {?} */\nConfirmationsComponent.prototype._current;\n/** @type {?} */\nConfirmationsComponent.prototype._lastResolve;\n/** @type {?} */\nConfirmationsComponent.prototype._listener;\n/** @type {?} */\nConfirmationsComponent.prototype._service;\n/** @type {?} */\nConfirmationsComponent.prototype._resolver;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {ConfirmationsComponent} from './confirmations.component';\r\nimport {ConfirmationComponent} from './confirmation.component';\r\nimport {ConfirmationService} from './confirmations.service';\nexport class JasperoConfirmationsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    declarations: [\r\n        ConfirmationsComponent,\r\n        ConfirmationComponent\r\n    ],\r\n    providers: [ConfirmationService],\r\n    exports: [ConfirmationsComponent]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction JasperoConfirmationsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nJasperoConfirmationsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJasperoConfirmationsModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["this","Subject","ConfirmationService","title","message","override","resolve$","confirmation$","next","type","Injectable","_injector","_ngZone","overlay","overlayClickToClose","showCloseButton","confirmText","declineText","resolve","key","incomingData","fromInjector","get","undefined","ConfirmationComponent","close","animationState","runOutsideAngular","setTimeout","_this","run","closedWithOutResolving","how","Component","args","selector","template","styles","animations","trigger","state","style","opacity","transition","animate","transform","Injector","NgZone","_service","_resolver","Object","ConfirmationsComponent","settings","_listener","subscribe","alert","_current","_handleResolve","settingsFinalAsArray","settingFinalAsObj","toUse","push","value","inputProviders","map","input","provide","useValue","resolvedInputs","ReflectiveInjector","injector","fromResolvedProviders","compViewContainerRef","parentInjector","factory","resolveComponentFactory","component","create","_lastResolve","res","insert","hostView","destroy","unsubscribe","entryComponents","ComponentFactoryResolver","ViewChild","read","ViewContainerRef","defaultSettings","Input","NgModule","imports","CommonModule","declarations","providers","exports","JasperoConfirmationsModule"],"mappings":"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"}